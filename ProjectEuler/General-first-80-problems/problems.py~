
"""
Project Euler code and questions
Andy Perrett 2018
"""
import time
from primes import *

#############
# Problem 1 #
#############

"""
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
"""

def sumOfMultiplesOf3And5Below(n):
  answer = 0
  for i in range(n):
    if i % 3 == 0 or i % 5 == 0:
      answer += i  
  return(answer)

print("Problem 1")
print("Sum of multiples of 3 or 5 below 1000: ", sumOfMultiplesOf3And5Below(1000))
print()

#############
# Problem 2 # 
#############

"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

"""

def sumOfEvenFibbonacciNumbersUpTo(n):
  # fib = (n - 1) + (n - 2)
  # Wanted to do it another way rather than recursive fib
  n2 = 1
  n1 = 2
  total = 2
  fib = 0
  while (n1 + n2) <= n:
    if (n1 + n2) % 2 == 0:
      total += (n1 + n2)
    n2Old = n2
    n2 = n1
    n1 = n1 + n2Old
  return(total)

print("Problem 2")
print("Sum of Even Fib terms upto 4000000: ",sumOfEvenFibbonacciNumbersUpTo(4000000))
print()

#############
# Problem 3 # 
#############

"""
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
"""


def largestPrimeFactor(n):
  # my own module
  # This function is now in module primes.py
  #from primes import isAPrimeNumber
  found = 0
  p = int(n ** 0.5) + 1
  while p > 0:
    if isAPrimeNumber(p):
      if n % p == 0:
        return(p)
    p -= 1

print("Problem 3")
print("Largest prime factor of 600851475143: ", largestPrimeFactor(600851475143))
print()
    
#############
# Problem 4 #
#############
"""
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.
"""

def largestPalindromeProduct(number_of_digits):
  largest = 0
  # I'm pleased with this method. Got it first time
  for n in range(10 ** (number_of_digits - 1), 10 ** number_of_digits):
    for m in range(10 ** (number_of_digits - 1), 10 ** number_of_digits):
      # turn answer into string to make comparison easier (possible)
      if str(n * m) == str(n * m)[::-1]: # reverse string using stepped slice
        if (n * m) > largest:
          largest = (n * m)
  return(largest)

print("Problem 4")
print("Largest palindrome made from the product of two 3 digit numbers : ", largestPalindromeProduct(3))
print()

#############
# Problem 5 #
#############
"""
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
"""

def smallestMultiple(n):
  # Brute force works for small n
  # But we need to reduce our search area
  # Euler project says all answers should be returned within 1 minute
  # so start our search by multiplying all primes upto n then by n
  # Well, it's a start and is under 40 seconds :) 
  # Challenge achieved albeit not the best way!
  from primes import prime_numbers
  i = 0
  number = 1
  while prime_numbers[i] < n:
    number *= prime_numbers[i]
    i += 1
  number *= n
  # we could just jump in from here but > 2 minutes
  while 1:
    for i in range(1, n + 1):
      if number % i != 0:
        break
    else: # first time I've used for-else. Handy.
      return(number)
    number += 1

    
print("Problem 5")
print("Smallest positive number that is evenly divisable by all 1 to 20: ", smallestMultiple(20))
print()

#############
# Problem 6 #
#############
"""
The sum of the squares of the first ten natural numbers is,

1**2 + 2**2 + ... + 10**2 = 385
The square of the sum of the first ten natural numbers is,

(1 + 2 + ... + 10)**2 = 55**2 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
"""
      
def sumSquareDifference(n):
  sumSquares = squareSum = 0
  for i in range(1, n + 1):
    sumSquares += i ** 2
    squareSum += i
  return((squareSum ** 2) - sumSquares)

print("Problem 6")
print ("Difference of the sum of squares of the first 100 natural numbers and square of sum: " , sumSquareDifference(100))
print()

#############
# Problem 7 # 
#############
"""
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?
"""

# I'm allowed to do this because I wrote my own prime number module :)
#from primes import prime_numbers
print("Problem 7")
print("10,001st prime number : ", prime_numbers[10000])
print()

#############
# Problem 8 #
#############
"""
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
"""

def largestProductInSeries(n):
  # n is how many in series we want product of
  digits = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
  greatestProduct = 0
  for i in range(len(digits) - n+1):
    series = digits[i:i + n]
    total = 1
    for ii in range(len(series)):
      total *= int(series[ii])
      if total > greatestProduct:
        greatestProduct = total
  return(greatestProduct)

print("Problem 8")
print("Product of 13 adjacent series: ", largestProductInSeries(13))
print()

#############
# Problem 9 #
#############
"""
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

a**2 + b**2 = c**2
For example, 3**2 + 4**2 = 9 + 16 = 25 = 5**2.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
"""

def specialPythagoreanTriplet(n):
  # note after sucessfully writing algorithm I
  # reduced b search area by div 2 by reading up on problem
  # nested loops don't scale. Maths is needed here!
  for a in range(int(n / 3) + 1):
    for b in range(a + 1, int((n - a) / 2)):
      c = n - a - b
      # c * c is quicker than c ** 2
      if (a * a) + (b * b) == (c * c) and c > b:
        # print(a,b,c)
        return(a * b * c)  
  return()
  
print("Problem 9")
print("Special Pythagorean Triplet a + b + c = 1000, product of abc: ", specialPythagoreanTriplet(1000))
print()

##############
# Problem 10 #
##############

"""
The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

Find the sum of all the primes below two million.
"""
def summationOfPrimesBelow(n):
  total = 2
  for i in range(3, n, 2):
    if isAPrimeNumber(i):
      total += i
  return(total)

print("Problem 10")
start = time.time()
print("Summation of all primes below 2,000,000: ", summationOfPrimesBelow(2000000))
end = time.time()
print("Time taken: " + str(int((end - start) * 100) / 100) + " seconds")
# this takes about 13 seconds. A better method could reduce this to 1 second....look for it :)
print()

##############
# Problem 11 #
##############
"""
In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
"""

def largestProductInGrid(n):
  grid = []
  grid.append([8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8])
  grid.append([49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0])
  grid.append([81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65])
  grid.append([52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91])
  grid.append([22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80])
  grid.append([24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50])
  grid.append([32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70])
  grid.append([67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21])
  grid.append([24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72])
  grid.append([21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95])
  grid.append([78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92])
  grid.append([16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57])
  grid.append([86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58])
  grid.append([19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40])
  grid.append([4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66])
  grid.append([88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69])
  grid.append([4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36])
  grid.append([20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16])
  grid.append([20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54])
  grid.append([1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48])
  largest = 0
  # Horizontal
  product = 0
  for rows in range(len(grid)):
    for cols in range(len(grid[rows]) - n):
      product = grid[rows][cols] * grid[rows][cols + 1] * grid[rows][cols + 2] * grid[rows][cols + 3]
      if product > largest:
        largest = product
  # Vertical
  product = 0
  for rows in range(len(grid) - n):
    for cols in range(len(grid[rows])):
      product = grid[rows][cols] * grid[rows + 1][cols] * grid[rows + 2][cols] * grid[rows + 3][cols]
      if product > largest:
        largest = product
  # Diagnol l to r
  product = 0
  for rows in range(len(grid) - n):
    for cols in range(len(grid[rows]) - n):
      product = grid[rows][cols] * grid[rows + 1][cols + 1] * grid[rows + 2][cols + 2] * grid[rows + 3][cols + 3]
      if product > largest:
        largest = product
    # Diagnol r to l
  product = 0
  for rows in range(n - 1, len(grid)):
    for cols in range(len(grid[rows]) - n):
      product = grid[rows][cols] * grid[rows - 1][cols + 1] * grid[rows - 2][cols + 2] * grid[rows - 3][cols + 3]
      if product > largest:
        largest = product
  return (largest)

print("Problem 11")
print("Greatest product of 4 adjacent cells: ", largestProductInGrid(4))
print()

##############
# Problem 12 # 
##############
"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

def highlyDivisibleTriangularNumber(divisors):
  # Tn = n(n + 1) / 2
  n = divisors # pick a start to reduce search
  while 1:
    #Tn = int((n * (n + 1)) / 2)
    Tn = int((n / 2) * (n + 1))
    total = 0
    # reduce search range
    for d in range(1, int(Tn ** 0.5) + 1):
      if Tn % d == 0:
        total += 2 # because we reduced search range
      if total > divisors:
        return(Tn)
    n += 1
  return()

print("Problem 12")
start = time.time()
print("First Triangular number with more than 500 divisors: ",highlyDivisibleTriangularNumber(500))
end = time.time()
print("Time taken: " + str(int((end - start) * 100) / 100) + " seconds")
print()

##############
# Problem 13 #
##############

"""
Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.

37107287533902102798797998220837590246510135740250
46376937677490009712648124896970078050417018260538
74324986199524741059474233309513058123726617309629
91942213363574161572522430563301811072406154908250
23067588207539346171171980310421047513778063246676
89261670696623633820136378418383684178734361726757
28112879812849979408065481931592621691275889832738
44274228917432520321923589422876796487670272189318
47451445736001306439091167216856844588711603153276
70386486105843025439939619828917593665686757934951
62176457141856560629502157223196586755079324193331
64906352462741904929101432445813822663347944758178
92575867718337217661963751590579239728245598838407
58203565325359399008402633568948830189458628227828
80181199384826282014278194139940567587151170094390
35398664372827112653829987240784473053190104293586
86515506006295864861532075273371959191420517255829
71693888707715466499115593487603532921714970056938
54370070576826684624621495650076471787294438377604
53282654108756828443191190634694037855217779295145
36123272525000296071075082563815656710885258350721
45876576172410976447339110607218265236877223636045
17423706905851860660448207621209813287860733969412
81142660418086830619328460811191061556940512689692
51934325451728388641918047049293215058642563049483
62467221648435076201727918039944693004732956340691
15732444386908125794514089057706229429197107928209
55037687525678773091862540744969844508330393682126
18336384825330154686196124348767681297534375946515
80386287592878490201521685554828717201219257766954
78182833757993103614740356856449095527097864797581
16726320100436897842553539920931837441497806860984
48403098129077791799088218795327364475675590848030
87086987551392711854517078544161852424320693150332
59959406895756536782107074926966537676326235447210
69793950679652694742597709739166693763042633987085
41052684708299085211399427365734116182760315001271
65378607361501080857009149939512557028198746004375
35829035317434717326932123578154982629742552737307
94953759765105305946966067683156574377167401875275
88902802571733229619176668713819931811048770190271
25267680276078003013678680992525463401061632866526
36270218540497705585629946580636237993140746255962
24074486908231174977792365466257246923322810917141
91430288197103288597806669760892938638285025333403
34413065578016127815921815005561868836468420090470
23053081172816430487623791969842487255036638784583
11487696932154902810424020138335124462181441773470
63783299490636259666498587618221225225512486764533
67720186971698544312419572409913959008952310058822
95548255300263520781532296796249481641953868218774
76085327132285723110424803456124867697064507995236
37774242535411291684276865538926205024910326572967
23701913275725675285653248258265463092207058596522
29798860272258331913126375147341994889534765745501
18495701454879288984856827726077713721403798879715
38298203783031473527721580348144513491373226651381
34829543829199918180278916522431027392251122869539
40957953066405232632538044100059654939159879593635
29746152185502371307642255121183693803580388584903
41698116222072977186158236678424689157993532961922
62467957194401269043877107275048102390895523597457
23189706772547915061505504953922979530901129967519
86188088225875314529584099251203829009407770775672
11306739708304724483816533873502340845647058077308
82959174767140363198008187129011875491310547126581
97623331044818386269515456334926366572897563400500
42846280183517070527831839425882145521227251250327
55121603546981200581762165212827652751691296897789
32238195734329339946437501907836945765883352399886
75506164965184775180738168837861091527357929701337
62177842752192623401942399639168044983993173312731
32924185707147349566916674687634660915035914677504
99518671430235219628894890102423325116913619626622
73267460800591547471830798392868535206946944540724
76841822524674417161514036427982273348055556214818
97142617910342598647204516893989422179826088076852
87783646182799346313767754307809363333018982642090
10848802521674670883215120185883543223812876952786
71329612474782464538636993009049310363619763878039
62184073572399794223406235393808339651327408011116
66627891981488087797941876876144230030984490851411
60661826293682836764744779239180335110989069790714
85786944089552990653640447425576083659976645795096
66024396409905389607120198219976047599490197230297
64913982680032973156037120041377903785566085089252
16730939319872750275468906903707539413042652315011
94809377245048795150954100921645863754710598436791
78639167021187492431995700641917969777599028300699
15368713711936614952811305876380278410754449733078
40789923115535562561142322423255033685442488917353
44889911501440648020369068063960672322193204149535
41503128880339536053299340368006977710650566631954
81234880673210146739058568557934581403627822703280
82616570773948327592232845941706525094512325230608
22918802058777319719839450180888072429661980811197
77158542502016545090413245809786882778948721859617
72107838435069186155435662884062257473692284509516
20849603980134001723930671666823555245252804609722
53503534226472524250874054075591789781264330331690
"""

def largeSum():
  numbers = []
  numbers.append("37107287533902102798797998220837590246510135740250")
  numbers.append("46376937677490009712648124896970078050417018260538")
  numbers.append("74324986199524741059474233309513058123726617309629")
  numbers.append("91942213363574161572522430563301811072406154908250")
  numbers.append("23067588207539346171171980310421047513778063246676")
  numbers.append("89261670696623633820136378418383684178734361726757")
  numbers.append("28112879812849979408065481931592621691275889832738")
  numbers.append("44274228917432520321923589422876796487670272189318")
  numbers.append("47451445736001306439091167216856844588711603153276")
  numbers.append("70386486105843025439939619828917593665686757934951")
  numbers.append("62176457141856560629502157223196586755079324193331")
  numbers.append("64906352462741904929101432445813822663347944758178")
  numbers.append("92575867718337217661963751590579239728245598838407")
  numbers.append("58203565325359399008402633568948830189458628227828")
  numbers.append("80181199384826282014278194139940567587151170094390")
  numbers.append("35398664372827112653829987240784473053190104293586")
  numbers.append("86515506006295864861532075273371959191420517255829")
  numbers.append("71693888707715466499115593487603532921714970056938")
  numbers.append("54370070576826684624621495650076471787294438377604")
  numbers.append("53282654108756828443191190634694037855217779295145")
  numbers.append("36123272525000296071075082563815656710885258350721")
  numbers.append("45876576172410976447339110607218265236877223636045")
  numbers.append("17423706905851860660448207621209813287860733969412")
  numbers.append("81142660418086830619328460811191061556940512689692")
  numbers.append("51934325451728388641918047049293215058642563049483")
  numbers.append("62467221648435076201727918039944693004732956340691")
  numbers.append("15732444386908125794514089057706229429197107928209")
  numbers.append("55037687525678773091862540744969844508330393682126")
  numbers.append("18336384825330154686196124348767681297534375946515")
  numbers.append("80386287592878490201521685554828717201219257766954")
  numbers.append("78182833757993103614740356856449095527097864797581")
  numbers.append("16726320100436897842553539920931837441497806860984")
  numbers.append("48403098129077791799088218795327364475675590848030")
  numbers.append("87086987551392711854517078544161852424320693150332")
  numbers.append("59959406895756536782107074926966537676326235447210")
  numbers.append("69793950679652694742597709739166693763042633987085")
  numbers.append("41052684708299085211399427365734116182760315001271")
  numbers.append("65378607361501080857009149939512557028198746004375")
  numbers.append("35829035317434717326932123578154982629742552737307")
  numbers.append("94953759765105305946966067683156574377167401875275")
  numbers.append("88902802571733229619176668713819931811048770190271")
  numbers.append("25267680276078003013678680992525463401061632866526")
  numbers.append("36270218540497705585629946580636237993140746255962")
  numbers.append("24074486908231174977792365466257246923322810917141")
  numbers.append("91430288197103288597806669760892938638285025333403")
  numbers.append("34413065578016127815921815005561868836468420090470")
  numbers.append("23053081172816430487623791969842487255036638784583")
  numbers.append("11487696932154902810424020138335124462181441773470")
  numbers.append("63783299490636259666498587618221225225512486764533")
  numbers.append("67720186971698544312419572409913959008952310058822")
  numbers.append("95548255300263520781532296796249481641953868218774")
  numbers.append("76085327132285723110424803456124867697064507995236")
  numbers.append("37774242535411291684276865538926205024910326572967")
  numbers.append("23701913275725675285653248258265463092207058596522")
  numbers.append("29798860272258331913126375147341994889534765745501")
  numbers.append("18495701454879288984856827726077713721403798879715")
  numbers.append("38298203783031473527721580348144513491373226651381")
  numbers.append("34829543829199918180278916522431027392251122869539")
  numbers.append("40957953066405232632538044100059654939159879593635")
  numbers.append("29746152185502371307642255121183693803580388584903")
  numbers.append("41698116222072977186158236678424689157993532961922")
  numbers.append("62467957194401269043877107275048102390895523597457")
  numbers.append("23189706772547915061505504953922979530901129967519")
  numbers.append("86188088225875314529584099251203829009407770775672")
  numbers.append("11306739708304724483816533873502340845647058077308")
  numbers.append("82959174767140363198008187129011875491310547126581")
  numbers.append("97623331044818386269515456334926366572897563400500")
  numbers.append("42846280183517070527831839425882145521227251250327")
  numbers.append("55121603546981200581762165212827652751691296897789")
  numbers.append("32238195734329339946437501907836945765883352399886")
  numbers.append("75506164965184775180738168837861091527357929701337")
  numbers.append("62177842752192623401942399639168044983993173312731")
  numbers.append("32924185707147349566916674687634660915035914677504")
  numbers.append("99518671430235219628894890102423325116913619626622")
  numbers.append("73267460800591547471830798392868535206946944540724")
  numbers.append("76841822524674417161514036427982273348055556214818")
  numbers.append("97142617910342598647204516893989422179826088076852")
  numbers.append("87783646182799346313767754307809363333018982642090")
  numbers.append("10848802521674670883215120185883543223812876952786")
  numbers.append("71329612474782464538636993009049310363619763878039")
  numbers.append("62184073572399794223406235393808339651327408011116")
  numbers.append("66627891981488087797941876876144230030984490851411")
  numbers.append("60661826293682836764744779239180335110989069790714")
  numbers.append("85786944089552990653640447425576083659976645795096")
  numbers.append("66024396409905389607120198219976047599490197230297")
  numbers.append("64913982680032973156037120041377903785566085089252")
  numbers.append("16730939319872750275468906903707539413042652315011")
  numbers.append("94809377245048795150954100921645863754710598436791")
  numbers.append("78639167021187492431995700641917969777599028300699")
  numbers.append("15368713711936614952811305876380278410754449733078")
  numbers.append("40789923115535562561142322423255033685442488917353")
  numbers.append("44889911501440648020369068063960672322193204149535")
  numbers.append("41503128880339536053299340368006977710650566631954")
  numbers.append("81234880673210146739058568557934581403627822703280")
  numbers.append("82616570773948327592232845941706525094512325230608")
  numbers.append("22918802058777319719839450180888072429661980811197")
  numbers.append("77158542502016545090413245809786882778948721859617")
  numbers.append("72107838435069186155435662884062257473692284509516")
  numbers.append("20849603980134001723930671666823555245252804609722")
  numbers.append("53503534226472524250874054075591789781264330331690")
  result = ""
  for line in numbers:
    while len(line) > len(result):
      result = "0" + result
    line1 = line
    while len(result) > len(line1):
      line1 = "0" + line1
    result2 = ""
    carry = 0
    for i in reversed(range(len(line1))):
      digit1 = int(line1[i])
      digit2 = int(result[i])
      result1 = digit1 + digit2 + carry
      if result1 > 9:
        carry = 1
        result1 = result1 - 10
      else:
        carry = 0
      result2 = str(result1) + result2
    result = result2
    if carry == 1:
      result = "1" + result
  # 5537376230390876637302048746832985971773659831892672
  return(result)

print("Problem 13")
print("First 10 digits of Large sum: ",largeSum()[0:10])
print()

##############
# Problem 14 #
##############

"""
The following iterative sequence is defined for the set of positive integers:

n → n/2 (n is even)
n → 3n + 1 (n is odd)

Using the rule above and starting with 13, we generate the following sequence:

13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.

Which starting number, under one million, produces the longest chain?

NOTE: Once the chain starts the terms are allowed to go above one million.
"""

def longestCollatzSequence(upto):
  cache = {}
  longest = 0
  sequence = 0
  for n in range(1, upto):
    number = n
    l = 1
    stop = 0
    while not stop:
      if number in cache:
        l += cache[number] - 1
        break
      if number % 2 == 0:
        number = number * 0.5
      else:
        number = (number + number + number) + 1
      l += 1
      if number == 1:
        stop = 1
    if n not in cache:
      cache[n] = l
    if l > longest:
      longest = l
      sequence = n
  # 837799
  #print("Longest sequence: ", l)
  return(sequence)

print("Problem 14")
start = time.time()
print("Longest Collatz Sequence: ", longestCollatzSequence(1000000))
end = time.time()
print("Time taken: " + str(int((end - start) * 100) / 100) + " seconds")
print()

##############
# Problem 15 #
##############
"""
Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.

How many such routes are there through a 20×20 grid?
"""
# NOTE TODO re-write my way
# n choose r (discrete maths)
# you need to make 40 moves for a route (n) and have 20 rows r
#  n!/r!(n-r)! = 40! / 20! * (40 - 20)!
# but algorithm wise it can be done like problem 18
def latticePaths(size):
    L = [1] * size
    for i in range(size):
        for j in range(i):
            L[j] = L[j]+L[j-1]
        L[i] = 2 * L[i - 1]
    return L[size - 1]
 
print("Problem 15")
start = time.time()
print("Number of Lattice Paths in 20 x 20 grid: ", latticePaths(20))
end = time.time()
print("Time taken: " + str(end - start) + " S")
print()

##############
# Problem 16 #
##############
"""
215 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.

What is the sum of the digits of the number 21000?
"""

def powerDigitSum(power):
  result = str(2 ** power)
  digitSum = 0
  for digit in result:
    digitSum += int(digit)
  return(digitSum)

print("Problem 16")
print("Power digit sum of 2 ** 1000: ", powerDigitSum(1000))
print()

##############
# Problem 17 #
##############

"""
If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.

If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?


NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with British usage.
"""
import time

# NOTE I made a module of numberToWords

def numberToWords(number):
  """
  Converts numbers to words in range
  0 to 999,999,999,999 
  """
  powers = {9: 'Billion', 6: 'Million', 3: 'Thousand'}
  out = ""
  # Check bounds
  if number == 0:
    return("Zero")
  if number > 999999999999:
    return("Number too large!")
  if number < 0:
    out += "Minus "
    number = abs(number)
  # Divide and test powers of
  didWeDivide = 0
  for p in reversed(range(3, 10, 3)):
    # Always break down to less than 1000
    divisor = int(number / 10 ** p)
    if divisor > 0:
      out += speakWords(divisor) + " " + powers[p] + " "
      divisor *= 10 ** p
      # Reduce and loop
      number -= divisor
      didWeDivide = 1
  # Whats left under 1000
  if didWeDivide == 1 and (number < 20 and number > 0):
    out += "and "
  if number > 0:
    out += speakWords(number)
  # All done
  return(out)

def speakWords(number):
  """ Convert numbers under 1000 """
  numbers = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine', 10: 'Ten', 11: 'Eleven', 12: 'Twelve', 13: 'Thirteen', 14: 'Fourteen', 15: 'Fifteen', 16: 'Sixteen', 17: 'Seventeen', 18: 'Eighteen', 19: 'Nineteen'}
  tens = {2: 'Twenty', 3: 'Thirty', 4: 'Forty', 5: 'Fifty', 6: 'Sixty', 7: 'Seventy', 8: 'Eighty', 9: 'Ninety'}  
  out = ""
  (hundreds, units) = divmod(number, 100)
  if hundreds > 0:
    out += numbers[hundreds] + " Hundred "
    if units > 0:
      out += "and "
  if units > 19:
    (ten, units) = divmod(units, 10)
    out += tens[ten]
    if units > 0:
      out += "-" + numbers[units]
  elif units > 0:
    out += numbers[units]
  return(out)
"""
# Test
for n in range(1002):
  print(n, numberToWords(n))
# Biggest  
print(numberToWords(999999999999))
# Overload
print(numberToWords(1000000000000))
# minus
print(numberToWords(-90000560001))
"""
# Euler
start = time.time()
s = ""
for n in range(1,1001):
  s += numberToWords(n)
#s = numberToWords(342)
s = s.lower()
total = 0
for n in s:
  if ord(n) > 96 and ord(n) < 123:
    total += 1
print("Problem 17")
print("Total letters used in written numbers from 1 to 1000: ", total)
end = time.time()
print("Time taken: " + str(int((end - start) * 100) / 100) + " seconds")
print()

##############
# Problem 18 #
##############

"""
By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.

   3
  7 4
 2 4 6
8 5 9 3

That is, 3 + 7 + 4 + 9 = 23.

Find the maximum total from top to bottom of the triangle below:

              75
             95 64
            17 47 82
           18 35 87 10
          20 04 82 47 65
         19 01 23 75 03 34
        88 02 77 73 07 63 67
       99 65 04 28 06 16 70 92
      41 41 26 56 83 40 80 70 33
     41 48 72 33 47 32 37 16 94 29
    53 71 44 65 25 43 91 52 97 51 14
   70 11 33 28 77 73 17 78 39 68 17 57
  91 71 52 38 17 14 91 43 58 50 27 29 48
 63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23

NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)
"""

def maximumPathOne():
  """ Dynamic programming is called for """
  triangle = []
  triangle.append([75])
  triangle.append([95, 64])
  triangle.append([17, 47, 82])
  triangle.append([18, 35, 87, 10])
  triangle.append([20, 4, 82, 47, 65])
  triangle.append([19, 1, 23, 75, 3, 34])
  triangle.append([88, 2, 77, 73, 7, 63, 67])
  triangle.append([99, 65, 4, 28, 6, 16, 70, 92])
  triangle.append([41, 41, 26, 56, 83, 40, 80, 70, 33])
  triangle.append([41, 48, 72, 33, 47, 32, 37, 16, 94, 29])
  triangle.append([53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14])
  triangle.append([70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57])
  triangle.append([91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48])
  triangle.append([63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31])
  triangle.append([4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]) 
  # Iterate over triangle from bottom up
  for rows in reversed(range(0, len(triangle))):
    for cols in range(rows):
      a = triangle[rows][cols] + triangle[rows - 1][cols]
      b = triangle[rows][cols + 1] + triangle[rows - 1][cols]
      if a > b:
        triangle[rows - 1][cols] = a
      else: 
        triangle[rows - 1][cols] = b
  return(triangle[0][0])

print("Problem 18")
print("Maximum Path I Total: ", maximumPathOne())
print()

##############
# Problem 19 #
##############

"""
You are given the following information, but you may prefer to do some research for yourself.

1 Jan 1900 was a Monday.
Thirty days has September,
April, June and November.
All the rest have thirty-one,
Saving February alone,
Which has twenty-eight, rain or shine.
And on leap years, twenty-nine.
A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
"""
print("Problem 19")
# Dictionary of days in month
months = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}
# Dictionary of week days
days = {1: 'Monday', 2: 'Tuesday', 3: 'Wednesday', 4: 'Thursday', 5: 'Friday', 6: 'Saturday', 7: 'Sunday'}


def isLeap(year):
    # Returns True if int(year) is a leap year
    year = int(year)
    leap = False
    if (year % 4 == 0):
        leap = True
        if (year % 100 == 0) and (year % 400 != 0):
            leap = False
    return(leap)

# Set start and end date
startYear = 1900
endYear = 2000
startDay = 1
endDay = 31
startMonth = 1
endMonth = 12

# Our task - how many Sundays between start and end dates
numberSundays = 0
weekDay = 0 # Sunday

# Cycle thru years
for y in range(startYear, endYear + 1):
    # Cycle thru months
    for m in range(1, 13):
        daysInMonth = months[m]
        # If it is a leap year, Feb has +1 days
        if isLeap(y) and m == 2:
            daysInMonth += 1
        # Cycle thru days
        for d in range(1, daysInMonth + 1):
            weekDay += 1
            # Is it Sunday?
            if weekDay == 7:
                if d == 1 and y != 1900:
                    # Is it 1st of Month?
                    #print(days[weekDay], d, m, y)
                    numberSundays += 1
                weekDay = 0
print("Counting Sundays: ",numberSundays)
print()

##############
# Problem 20 #
##############
"""
n! means n × (n − 1) × ... × 3 × 2 × 1

For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.

Find the sum of the digits in the number 100!
"""

def factorialDigitSum(number):
  total = 1
  for i in range(number, 1, -2):
    total *= ( i * (i - 1))
  s = str(total)
  total = 0
  for i in s:
    total += int(i)
  return(total)


print("Problem 20")
print("Factorial Digit Sum for 100: ", factorialDigitSum(100))
print()

##############
# Problem 21 #
##############

"""
Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.

For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.

Evaluate the sum of all the amicable numbers under 10000.
"""

def d(n):
    # Sum of proper divisors of n
    s = 0
    for i in range(1, int(n * 0.5) + 1):
        if n % i == 0:
            s += i
    return(int(s))

import time
start = time.time()
print("Problem 21")
s = 0
for n in range(1, 10000):
    a = d(n)
    b = d(a)
    if n == b and a != b :
        s += n

end = time.time()
print("Sum of amicable numbers: ",s)
print("Time taken: ", int((end - start) * 100) / 100, " Seconds")
print()


##############
# Problem 22 #
##############

"""
Using names.txt (right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.

For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.

What is the total of all the name scores in the file?
"""
def nameScores():
  # populate list
  with open("p022_names.txt", "r") as f:
    for lines in f:
      names=lines.split(',')
  f.close()
  n = []
  total = 0
  for i, name in enumerate(sorted(names)):
    n = name.strip('"').lower()
    #print((i+1), n, end="")
    score = 0
    for c in n:
      v = ord(c) - 96
      score += v
      #print("",v,end="")
    score *= (i+1)
    #print("",score)
    total += score
  return(total)

print("Problem 22")
print("Name Scores:", nameScores())
print()

##############
# Problem 23 #
##############
"""
A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.

A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.

As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.

Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.
"""

def properDivisors(n):
    # Returns a str of "perfect", "deficient", "abundant" if the sum
    # of the proper divisors is equal to n, < n or > n
    s = 0
    for i in range(1, int(n * 0.5) + 1):
        if n % i == 0:
            s += i
    if s == n:
        out = "perfect"
    elif s > n:
        out = "abundant"
    elif s < n:
        out = "deficient"
    return(out)

import time
print("Problem 23")
start = time.time()
abundantNumbers = []
# append dummy (we won't use [0])
abundantNumbers.append(False)

# Get all abundant numbers
for i in range(1, 28214):
    if properDivisors(i) == "abundant":
        abundantNumbers.append(i)

# Make blank list
canBe = []
for i in range(28214):
    canBe.append(False)

# Mark which numbers can be summed
for i in range(1, len(abundantNumbers)):
    for j in range(i, len(abundantNumbers)):
        if abundantNumbers[i] + abundantNumbers[j] <= 28213:
            canBe[abundantNumbers[i] + abundantNumbers[j]] = True            
        else:
            break

# Now sum all non abundant
s = 0
for i in range(1, 28214):
    if canBe[i] == False:
        s += i

print("Non Abundant Sums: ", s)
end = time.time()
print("Time taken:", int((end - start) * 100) / 100)
print()

###############
# Problem 24  #
###############

"""
A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:

012   021   102   120   201   210

What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?

"""
import time

def permutations(word):
    stack = list(word)
    results = stack.pop()
    while len(stack) != 0:
        c = stack.pop()
        new_results = []
        for w in results:
            for i in range(len(w)+1):
                new_results.append(w[:i] + c + w[i:])
        results = new_results
    return (sorted(results))


print("Problem 24")

start = time.time()

p = permutations("0123456789")
for i in range(len(p)):
    if i == 999999:
        break

end = time.time()
print("The millionth per of ", "0123456789", "is", p[i])
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()

###############
# Problem 25  #
###############

"""
The Fibonacci sequence is defined by the recurrence relation:

Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
Hence the first 12 terms will be:

F1 = 1
F2 = 1
F3 = 2
F4 = 3
F5 = 5
F6 = 8
F7 = 13
F8 = 21
F9 = 34
F10 = 55
F11 = 89
F12 = 144
The 12th term, F12, is the first term to contain three digits.

What is the index of the first term in the Fibonacci sequence to contain 1000 digits?

"""
import time


def fib(number):
    # Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1
    if number < 1:
        return(0)
    if number <= 2:
        return(1)
    f1 = 1
    f2 = 1
    for n in range(3,number + 1):
        f = f1 + f2
        f1 = f2
        f2 = f
    return(f)
    

print("Problem 25")

start = time.time()

n = 0
while len(str(fib(n))) != 1000:
    n += 1
end = time.time()
print("First term in fib sequence with 1000 digits", n)
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()

##############
# Problem 26 #
##############

"""
A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:

1/2	= 	0.5
1/3	= 	0.(3)
1/4	= 	0.25
1/5	= 	0.2
1/6	= 	0.1(6)
1/7	= 	0.(142857)
1/8	= 	0.125
1/9	= 	0.(1)
1/10	= 	0.1
Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.

Find the value of d < 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.
"""
print("Problem 26")
longestCycle = 0
longestNumber = 0
longestRecurring = ""
for n in range(1, 1001):
    digitStore = []
    remainder = 1 % n
    pos = 0
    seq = ""
    while pos < n:
        if remainder in digitStore:
            if pos > longestCycle:
                longestCycle = pos
                longestNumber = n
                longestRecurring = seq
            occur = digitStore.index(remainder)
            #print("1/"+str(n)+" = 0."+seq[:occur]+"("+seq[occur:]+")")
            break
        r = remainder*10//n
        seq += str(r)
        digitStore.append(remainder)
        remainder *= 10
        remainder %= n
        
        pos += 1
print("Longest Number = ", longestNumber)
print("Longest Cycle = ", longestCycle)
#print("Longest Recurring Cycle = ", longestRecurring)
print()

##############
# Problem 27 #
##############
"""
Quadratic Primes 

Euler discovered the remarkable quadratic formula:

n2+n+41
It turns out that the formula will produce 40 primes for the consecutive integer values 0≤n≤39. However, when n=40,402+40+41=40(40+1)+41 is divisible by 41, and certainly when n=41,412+41+41 is clearly divisible by 41.

The incredible formula n2−79n+1601 was discovered, which produces 80 primes for the consecutive values 0≤n≤79. The product of the coefficients, −79 and 1601, is −126479.

Considering quadratics of the form:

n2+an+b, where |a|<1000 and |b|≤1000

where |n| is the modulus/absolute value of n
e.g. |11|=11 and |−4|=4
Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n=0.
"""

import time
from primes import *
print("Problem 27")
start = time.time()

# Stores for the best co-efficients
bN = bA = bB = bY = cP = 0

# Brute force it...
for a in range(-1000,1000):
    for b in range(-1000,1001):
        # primes must be odd so both a and b can't be even
        if not a % 2 and not b % 2:
            break
        # optimisation b should be a prime (doubles speed)
        if not isAPrimeNumber(b) or a > b:
            continue
        nPrimes = 0
        for n in range(1000000):
            y = (n * n) + (a * n) + b 
            if isAPrimeNumber(y):
                nPrimes += 1
                if nPrimes > cP:
                    bN = n
                    bA = a
                    bB = b
                    cP = nPrimes
            else:
                break

end = time.time()
print(bN,bA,bB,cP)
print("Product of a and b", bA * bB)
print("Time taken: ", int((end - start) * 100) / 100)
print()


###############
# Problem 28  #
###############

"""
Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:

21 22 23 24 25
20  7  8  9 10
19  6  1  2 11
18  5  4  3 12
17 16 15 14 13

It can be verified that the sum of the numbers on the diagonals is 101.

What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?

"""
import time
print("Problem 28")

start = time.time()

def right(matrix, y, x, n):
    x += 1
    n += 1
    matrix[y][x] = n
    return(matrix, y, x, n)

def left(matrix, y, x, n):
    x -= 1
    n += 1
    matrix[y][x] = n
    return(matrix, y, x, n)

def down(matrix, y, x, n):
    y += 1
    n += 1
    matrix[y][x] = n
    return(matrix, y, x, n)

def up(matrix, y, x, n):
    y -= 1
    n += 1
    matrix[y][x] = n
    return(matrix, y, x, n)

def numberSpiral(size):
    matrix = [[0 for x in range(size)] for y in range(size)]
    middle = int((size / 2))
    x = middle
    y = middle
    n = 1
    # Set starting number
    matrix[y][x] = n
    loop = 1
    while n != (size * size):
        matrix, y, x, n = right(matrix, y, x, n)
        for d in range(loop):
            matrix, y, x, n = down(matrix, y, x, n)
        for l in range(loop + 1):
            matrix, y, x, n = left(matrix, y, x, n)
        for u in range(loop + 1):
            matrix, y, x, n = up(matrix, y, x, n)
        for r in range(loop + 1):
            matrix, y, x, n = right(matrix, y, x, n)
        loop += 2

    # get diaganol sums
    rD = 0
    for d1 in range(size):
        rD += matrix[d1][d1]
    for d2 in range(size):
        rD += matrix[d2][(size - 1) - d2]
    return(rD - 1)



print("Diaganols summed", numberSpiral(1001))
end = time.time()
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()


##############
# Problem 29 #
##############

"""
Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

22=4, 23=8, 24=16, 25=32
32=9, 33=27, 34=81, 35=243
42=16, 43=64, 44=256, 45=1024
52=25, 53=125, 54=625, 55=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
"""

powers = []
for a in range(2, 101):
    for b in range(2, 101):
        p = a ** b
        if p not in powers:
            powers.append(p)
print("Problem 29")
print("There are:",len(powers), "Distict powers")
print()



##############
# Problem 30 #
##############
"""
Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:

1634 = 14 + 64 + 34 + 44
8208 = 84 + 24 + 04 + 84
9474 = 94 + 44 + 74 + 44
As 1 = 14 is not a sum it is not included.

The sum of these numbers is 1634 + 8208 + 9474 = 19316.

Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.
"""
def digitFifthPowers():
  # upper bound is 6 * 9^5
  # Each digit is 9^5 and 9 digits of 9^5 is max 531441
  # so that tells us that 6 digits is upper bound
  fifths = []
  for n in range(10,6 * (9**5)):
    s = str(n)
    total = 0
    for digit in s:
      total += int(digit) ** 5
    if total == n:
      fifths.append(n)
  total = 0
  for n in fifths:
    total += n
    # print(n)
  return(total)

print("Problem 30")
print("Digit Fifth Powers:", digitFifthPowers())
print()


###############
# Problem 31  #
###############

"""
In England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:

1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).
It is possible to make £2 in the following way:

1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
How many different ways can £2 be made using any number of coins?
"""
import time
print("Problem 31")

start = time.time()
# Brute force
goal = 201
combinations = 0
for twoHundred in range(goal, 0, -200):
    for oneHundred in range(twoHundred, 0, -100):
        for fifty in range(oneHundred, 0, -50):
            for twenty in range(fifty, 0, -20):
                for ten in range(twenty, 0, -10):
                    for five in range(ten, 0, -5):
                        for two in range(five, 0, -2):
                            combinations += 1


end = time.time()
print("There are", combinations, "of making £2")
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()

# Dynamic (Someone elses code idea)
goal = 200
coins = [1, 2, 5, 10, 20, 50, 100, 200]
# we have 200 coins
combinations = [0 for a in range(goal + 1)]
combinations[0] = 1
for i in range(0, len(coins)):
    for j in range(coins[i], goal + 1):
        combinations[j] += combinations[j - coins[i]]

print("There are", combinations[len(combinations) - 1], "of making £2")
print()

##############
# Problem 32 #
##############
"""
We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.

The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.

Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.

HINT: Some products can be obtained in more than one way so be sure to only include it once in your sum.

NOTE 2 digit x 3 digit + answer = 9 didits

"""

def ranges(a , b):
  allNines = []
  for multiplicand in range(a, a * 10):
    for multiplier in range(b, b * 10):
      product = multiplicand * multiplier
      # make string sum
      digits = str(multiplicand) + str(multiplier) + str(product)
      # as long as 9 digits and no zero
      if len(digits) == 9 and not ("0" in digits):
        allDigits = []
        # put each digit into a list as long as not already there
        # which removes duplicate
        for digit in digits:
          if not digit in allDigits:
            allDigits.append(digit)
        # if the list is still 9 digits
        if len(allDigits) == 9:
          # put the product into the final list
          # making sure to remove duplicate
          if not product in allNines:
            allNines.append(product)
  return(allNines)

def pandigitalProducts():
  allNines = []
  # we need 2 digit x 3 digit sums
  allNines += ranges(10, 100)
  # plus 1 diget x 4 digit sums
  allNines += ranges(1, 1000)
  total = 0
  # total them up
  for number in allNines:
    total += number
  # return answer
  return(total)

print("Problem 32")
start = time.time()
print("The Pandigital products: ", pandigitalProducts())
end = time.time()
print("Time taken: " + str(int( ((end - start)*1000)     *100)/100) + " milli seconds")
print()

###############
# Problem 33  #
###############

"""
The fraction 49/98 is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly believe that 49/98 = 4/8, which is correct, is obtained by cancelling the 9s.

We shall consider fractions like, 30/50 = 3/5, to be trivial examples.

There are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits in the numerator and denominator.

If the product of these four fractions is given in its lowest common terms, find the value of the denominator.

"""
import time
print("Problem 33")
print("The Fractions with double digit numerator and denominators which can be reduced by cancelling are:")
start = time.time()

count = 1
sumDenominators = 0
for numerator in range(10,100):
    for denominator in range(numerator,100):
        nStr = str(numerator)
        dStr = str(denominator)
        changed = False
        if nStr[1] == dStr[0]:
            nStr = nStr[0]
            dStr = dStr[1]
            changed = True
        elif nStr[0] == dStr[1]:
            nStr = nStr[1]
            dStr = dStr[0]
            changed = True
        nStr = int(nStr)
        dStr = int(dStr)
        if  dStr > nStr  and changed == True:
            if (numerator / denominator) == nStr / dStr :
                count *= nStr / dStr
                print(str(numerator)+"/"+str(denominator)+" = "+str(nStr)+"/"+str( dStr))
print("The product = ", round(count, 8))
mul = 1
while count < 1:
    mul *= 10
    count *= mul
print("Product fraction = "+str(int(round(count / mul * 10,8))) +"/"+str(mul))
end = time.time()    
print("Denominator in LCT:", mul)
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()


##############
# Problem 34 #
##############

"""
145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.

Find the sum of all numbers which are equal to the sum of the factorial of their digits.

Note: as 1! = 1 and 2! = 2 are not sums they are not included.
"""
print("Problem 34")
import time
start = time.time()
# 2,540,160 is the upper bound
# because 9! = 362,880 x 7 digits.
# x 8 still gives us 7 digits and this upper bound
# only speeds things up
# You can double the speed again by caching the factorial results
# for each digit
factorial = {'0':1, '1':1, '2':2, '3':6, '4':24, '5':120, '6':720, '7':5040, '8':40320, '9':362880}
grandTotal = 0
for n in range(3, 2540160):
    # Convert to str to make each digit accessible
    sN = str(n)
    total = 0
    # sum each digit's factorial
    for i in sN:
        total += factorial[i]
    # if total matches the number then sum with any other results
    if total == n:
        grandTotal += total

end = time.time()
print("Digital Factorials Sum:", grandTotal)
print("Time take: ", int((end - start)* 100) / 100, " Seconds")
print()


##############
# Problem 35 #
##############

"""
The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.

There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.

How many circular primes are there below one million?

"""
import time
from primes import *

def cyclic(n):
    # returns list of cyclic perms
    number = str(n)
    l = []
    for i in range(len(number)):
        # remove the fist add to end
        p = number[1:] + number[0:1]
        number = p
        l.append(p)
    return(l)

def evenFive(prime):
    p = str(prime)
    for digit in p:
        if int(digit) == 5 or (int(digit) % 2 == 0):
            return(True)
    return(False)

start = time.time()
print("Problem 35")
nCircularPrimes = 0
for prime in prime_numbers:
    if prime >= 1000000:
        break
    # check for even digits or a 5
    if prime != 2 and prime != 5:
        if evenFive(prime):
            continue
    #print(prime, nCircularPrimes)
    prime_perms = cyclic(prime)
    isCircular = True
    for i in prime_perms:
        if not int(i) in prime_numbers:
            isCircular = False
            break
            
    if isCircular:
        nCircularPrimes += 1
end = time.time()
print("Number of Circular primes under 1000000:", nCircularPrimes)
print("Time taken:", int((end-start) * 100) / 100, "Seconds")
print()

##############
# Problem 36 #
##############
"""
The decimal number, 585 = 10010010012 (binary), is palindromic in both bases.

Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.

(Please note that the palindromic number, in either base, may not include leading zeros.)
"""
import time
print("Problem 36")
start = time.time()
total = 0
for i in range(1, 1000001, 2):
    D = str(i)
    if D[0] != D[-1]:
        continue
    rD = D[::-1]
    B = bin(i)[2:]
    rB = B[::-1]
    if D == rD and B == rB:
        total += i
end = time.time()
print("Double-base palindromes Sum:",total)
print("Time taken:", int((end-start) * 100) / 100, "Seconds")
print()

##############
# Problem 37 #
##############
"""
The number 3797 has an interesting property. Being prime itself, it is possible to continuously remove digits from left to right, and remain prime at each stage: 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.

Find the sum of the only eleven primes that are both truncatable from left to right and right to left.

NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.
"""
import time
from primes import *

def makeTruncatedSet(prime):
    tSet = []
    p = str(prime)
    for digit in range(len(p) -1):
        d = p[1:]
        if int(d) % 2 == 0 and int(d) != 2:
            return([])
        tSet.append(int(d))
        p = d
    p = str(prime)
    for digit in range(len(p) - 1):
        d = p[:-1]
        if int(d) % 2 == 0 and int(d) != 2:
            return([])
        tSet.append(int(d))
        p = d
    return(tSet)

start = time.time()
print("Problem 37")
total = 0
setCount = 0
for prime in prime_numbers:
    if prime <= 7:
        continue
    # we know there are only 11
    if setCount == 11:
        break
    primeTest = makeTruncatedSet(prime)
    # Also skip if there is an even truncated number
    if len(primeTest) == 0:
        continue
    truncatable = True
    for number in primeTest:
        if not number in prime_numbers:
            truncatable = False
            break
    if truncatable:
        total += prime
        setCount += 1
        
end = time.time()
print("Sum of all 11 truncatable primes", total)
print("Time taken:", int((end-start) * 100) / 100, "Seconds")
print()

###############
# Problem 38  #
###############

"""
Take the number 192 and multiply it by each of 1, 2, and 3:

192 × 1 = 192
192 × 2 = 384
192 × 3 = 576
By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1,2,3)

The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1,2,3,4,5).

What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1,2, ... , n) where n > 1?

"""
import time
print("Problem 38")

start = time.time()
largest = 0

number = 2
while len(str(number *2)) < 6:
    n = 1
    pandigitalStr = ""
    while len(pandigitalStr) < 9:
            pandigitalStr += str(number * n)
            n += 1
    if ''.join(sorted(pandigitalStr)) == "123456789":
        if int(pandigitalStr) > largest:
            largest = int(pandigitalStr)
            
    number += 1
end = time.time()
print("Largest pandigital",largest)
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()

###############
# Problem 39  #
###############

"""
If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.

{20,48,52}, {24,45,51}, {30,40,50}

For which value of p ≤ 1000, is the number of solutions maximised?
"""
import time, math
print("Problem 39")

start = time.time()
maximised = 0
number = 0
for p in range(0,1001, 2):
    # p = a + b + c
    # c = hypotenuse
    count = 0
    for a in range(1, p):
        for b in range(a, p):
            c = math.sqrt((a * a)+(b * b))
            if a + b + c > p:
                break
            if p == (a + b + c)  :
                count += 1
                if count > maximised:
                    maximised = count
                    number = p
    
end = time.time()
print("",number, maximised)
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()

##############
# Problem 40 #
##############
"""
An irrational decimal fraction is created by concatenating the positive integers:

0.123456789101112131415161718192021...

It can be seen that the 12th digit of the fractional part is 1.

If dn represents the nth digit of the fractional part, find the value of the following expression.

d1 × d10 × d100 × d1000 × d10000 × d100000 × d1000000
"""

def champernownesConstant():
  result = 0
  s = ""
  number = 1
  while len(s) <= 1000000:
    s += str(number)
    number += 1
  result = int(s[0]) * int(s[9]) * int(s[99]) * int(s[999]) * int(s[9999]) * int(s[99999]) * int(s[999999]) 
  return(result)


print("Problem 40")
print("Champernowne's constant: ", champernownesConstant())
print()

###############
# Problem 41  #
###############

"""
We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital and is also prime.

What is the largest n-digit pandigital prime that exists?
"""
import time, math
from primes import *
print("Problem 41")
start = time.time()

# trial and error 
# 7+6+5+4+3+2+1 = 28 is not divisible by 3

for prime in range(7654321,0, -2):
    if ''.join(sorted(str(prime))) == "1234567":
        if isAPrimeNumber(prime):
            break

end = time.time()
print("The largest prime is ",prime)
print("Time taken:", int((end - start)*10000) / 10000, "Seconds")
print()

##############
# Problem 42 #
##############

"""
The nth term of the sequence of triangle numbers is given by, tn = ½n(n+1); so the first ten triangle numbers are:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = t10. If the word value is a triangle number then we shall call the word a triangle word.

Using words.txt (right click and 'Save Link/Target As...'), a 16K text file containing nearly two-thousand common English words, how many are triangle words?
"""
import time, math
print("Problem 42")

start = time.time()

def isTriangleNumber(n):
    x = (math.sqrt(8*n + 1) - 1) / 2
    if x - int(x) > 0: # if x is not an integer
        return False
    return int(x)

count = 0
with open("p042_words.txt", "r") as f:
    lines = f.readline().replace("\"","")
f.close()
for word in lines.split(","):
    cCount = 0
    for char in word:
        cCount += (ord(char) - 64)
    if isTriangleNumber(cCount):
        count += 1

end = time.time()
print("There are",count,"triangle words")
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()

###############
# Problem 43  #
###############

"""
The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.

Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we note the following:

d2d3d4=406 is divisible by 2
d3d4d5=063 is divisible by 3
d4d5d6=635 is divisible by 5
d5d6d7=357 is divisible by 7
d6d7d8=572 is divisible by 11
d7d8d9=728 is divisible by 13
d8d9d10=289 is divisible by 17
Find the sum of all 0 to 9 pandigital numbers with this property.
"""
import time
print("Problem 43")

start = time.time()
# get 0 - 9 10 digit pandigital combinations
from pandigitalNumbers import pandigital10
primes = [2,3,5,7,11,13,17]
count = 0
for nStr in pandigital10:
    # Some numbers start with zero
    if len(nStr) == 10 and int(nStr) % 2 != 0:
        match = True
        for i in range(1, 8):
            if int(nStr[i:i + 3]) % primes[i - 1] != 0:
                match = False
                break
        if match:
            count += int(nStr)
    
end = time.time()
print("sum of all 0 to 9 pandigital numbers", count) 
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()

###############
# Problem 44  #
###############

"""
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

"""
import time, math
print("Problem 44")

start = time.time()

def P(n):
    return(int((n* (3 * n - 1)) / 2))

# Generate a set of Pentaganol numbers
p = set()
for n in range(3, 10000):
    p.add(P(n))

smallest = math.inf
for p1 in range(1, 10000):
    j = P(p1)
    if j in p:
        for p2 in range(p1, 0, -1):
            k = P(p2)
            done = False
            # If we find the first one it will be minimised
            if (j + k) in p and (j - k) in p:
                pDiff = j - k
                done = True
                break
        if done:
            break

end = time.time()
print("Pentagonal difference that is minimised is", pDiff)
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()

###############
# Problem 45  #
###############

"""
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""
import time, math
print("Problem 45")

start = time.time()
def isPentagonal(n):
    t =(math.sqrt(24 * n + 1) + 1) / 6
    if t == int(t):
        return(int(n))
    else:
        return(False)

def isTriangular(n):
    t =(math.sqrt(8 * n + 1) - 1) / 2
    if t == int(t):
        return(int(n))
    else:
        return(False)

def isHexagonal(n):
    t =(math.sqrt(8 * n + 1) + 1) / 4
    if t == int(t):
        return(int(n))
    else:
        return(False)
    

start = time.time()
n = 144
while True:
    nH = int(n * (2 * n - 1))
    if isPentagonal(nH):
        break
    n += 1 
end = time.time()
print("The next triangle number that is also pentagonal and hexagonal", isPentagonal(nH))
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()

###############
# Problem 46  #
###############

"""
It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.

9 = 7 + 2×12
15 = 7 + 2×22
21 = 3 + 2×32
25 = 7 + 2×32
27 = 19 + 2×22
33 = 31 + 2×12

It turns out that the conjecture was false.

What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?
"""

import time, math
from primes import isAPrimeNumber
print("Problem 46")
start = time.time()
found = False
composite = 3
primes = set()
while not found:
    if not isAPrimeNumber(composite):
        found = True
        # sum of prime and twice a square
        for prime in range(2, composite - 1):
            if prime in primes:
                upperBound = int(math.sqrt(0.5 *(composite - prime))) + 1
                for square in range(1, upperBound):
                    if prime + 2 * (square * square) == composite:
                        #print(str(composite)+" = "+str(prime)+" + 2 x "+str(square)+chr(178))
                        found = False
                        break
            if not found:
                break
    else:
        primes.add(composite)
    composite += 2
end = time.time()
print("Smallest composite that cannot be made by prime + twice a square is",composite - 2)
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()

##############
# Problem 47 #
##############
"""
The first two consecutive numbers to have two distinct prime factors are:

14 = 2 × 7
15 = 3 × 5

The first three consecutive numbers to have three distinct prime factors are:

644 = 2² × 7 × 23
645 = 3 × 5 × 43
646 = 2 × 17 × 19.

Find the first four consecutive integers to have four distinct prime factors each. What is the first of these numbers?
"""
import time
from primes import *

def groupFactors(factors):
    fD = {}
    dSet = []
    for item in factors:
        if item in fD:
            fD[item] += 1
        else:
            fD[item] = 1
    for item in fD:
        dSet.append(str(item) + "^" + str(fD[item]) )   
    return(dSet)

print("Problem 47")
start = time.time()

first = 0
consecutive = 0
for number in range(100000,1000000):
    f = primeFactorise(number)
    factors = groupFactors(f)
    if len(factors) == 4:
        consecutive +=1
        if consecutive == 1:
            first = number
        elif consecutive == 4:
            break
    else:
        consecutive = 0
        first = 0

end = time.time()
print("Distinct Prime Factors", first)
print("Time taken:", int((end-start) * 100) / 100, "Seconds")
print()

##############
# Problem 48 #
##############
"""
The series, 11 + 22 + 33 + ... + 1010 = 10405071317.

Find the last ten digits of the series, 11 + 22 + 33 + ... + 10001000.
"""
print("Problem 48")
s = 0
for i in range(1,1001):
    s = s + i**i
print("The last 10 digits are: ",str(s)[-10:])
print()

##############
# Problem 49 #
##############
"""
The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another.

There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence.

What 12-digit number do you form by concatenating the three terms in this sequence?.
"""
import time
from primes import *

def primePermutations():
    primes = set()
    for p1 in range(1229):
        firstPrime = sorted(str(prime_numbers[p1]))
        if len(firstPrime) >= 4 and not prime_numbers[p1] in primes:
            if (firstPrime[0] != "0"):
                for p2 in range(p1 + 1, 1229):
                    secondPrime = sorted(str(prime_numbers[p2]))
                    if secondPrime == firstPrime and prime_numbers[p2] - prime_numbers[p1] == 3330:
                        for p3 in range(p2 + 1, 1229):
                            thirdPrime = sorted(str(prime_numbers[p3]))
                            if thirdPrime == firstPrime and prime_numbers[p3] - prime_numbers[p2] == 3330:
                                primes.add(prime_numbers[p1])
                                print("Concatenated")
                                print(prime_numbers[p1],end="")
                                print(prime_numbers[p2],end="")
                                print(prime_numbers[p3])
                                print()
                                if len(primes) == 2:
                                    print("The two primes that have 4 digit permutations 3330 apart are:")
                                    print(primes)
                                    return
start = time.time()
print("problem 49")
primePermutations()
end = time.time()
print("Time taken: ", int((end-start)*100)/ 100, "Seconds")
print()

###############
# Problem 50  #
###############

"""
The prime 41, can be written as the sum of six consecutive primes:

41 = 2 + 3 + 5 + 7 + 11 + 13
This is the longest sum of consecutive primes that adds to a prime below one-hundred.

The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953.

Which prime, below one-million, can be written as the sum of the most consecutive primes?

"""
import time
from primes import *
print("Problem 50")
start = time.time()
prime = {}
target = 1000000
for i in range(10):
    if isAPrimeNumber(i):
        t = c = 0
        for j in range(i, 10000):
            if isAPrimeNumber(j):
                t += j
                c += 1
                if t >= target:
                    break
                if isAPrimeNumber(t):
                    if not t in prime:
                        prime[t] = c

c = n = 0
for p in prime:
    if prime[p] > c and p < 1000000:
        n = p
        c = prime[p]
end = time.time()
print("Consecutive prime sum < 1000000:", n)
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()

##############
# Problem 52 #
##############
"""
It can be seen that the number, 125874, and its double, 251748, contain exactly the same digits, but in a different order.

Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x, contain the same digits.
"""
# NOTE can't believe I didn't know you could sort a string!
# TODO rewrite using sorted strings and compare in a loop.
def sortDigits(n):
  numbers = str(n)
  l = []
  for number in numbers:
    l.append(number)
  return(sorted(l))

def cmpLists(l1, l2):
  if len(l1) != len(l2):
    return(False)
  for i,v in enumerate(l1):
    if l1[i] != l2[i]:
      return(False)
  return(True)

def permutedMultiples():
  found = 0
  n = 0
  while not found:
    n += 1
    t1 = sortDigits(n)
    t2 = sortDigits(n*2)
    t3 = sortDigits(n*3)
    t4 = sortDigits(n*4)
    t5 = sortDigits(n*5)
    t6 = sortDigits(n*6)
    if cmpLists(t1, t2) and cmpLists(t1, t3) and cmpLists(t1, t4) and cmpLists(t1, t5) and cmpLists(t1, t6):
      found = 1
  return(n)


print("Problem 52")
print("Permuted multiples 1x 2x 3x 4x 5x 6x: ", permutedMultiples())
print()

###############
# Problem 53  #
###############

"""
There are exactly ten ways of selecting three from five, 12345:

123, 124, 125, 134, 135, 145, 234, 235, 245, and 345

In combinatorics, we use the notation, 5C3 = 10.

In general,

nCr = n! / r!(n−r)!
,where r ≤ n, n! = n×(n−1)×...×3×2×1, and 0! = 1.
It is not until n = 23, that a value exceeds one-million: 23C10 = 1144066.

How many, not necessarily distinct, values of  nCr, for 1 ≤ n ≤ 100, are greater than one-million?
"""
import time, math
print("Problem 53")

start = time.time()



def nCr(n, r):
    combinations = math.factorial(n) / (math.factorial(r) * math.factorial(n - r))
    return(combinations)



end = time.time()
count = 0
for n in range(1, 101):
    for r in range (1, n + 1):
        combinations = nCr(n,r)
        if combinations > 1000000:
            count += 1

print("There are ",count, "values of nCr > 1000000")
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()


###############
# Problem 55  #
###############

"""
If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.

Not all numbers produce palindromes so quickly. For example,

349 + 943 = 1292,
1292 + 2921 = 4213
4213 + 3124 = 7337

That is, 349 took three iterations to arrive at a palindrome.

Although no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome. A number that never forms a palindrome through the reverse and add process is called a Lychrel number. Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise. In addition you are given that for every number below ten-thousand, it will either (i) become a palindrome in less than fifty iterations, or, (ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome. In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome: 4668731596684224866951378664 (53 iterations, 28-digits).

Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994.

How many Lychrel numbers are there below ten-thousand?

NOTE: Wording was modified slightly on 24 April 2007 to emphasise the theoretical nature of Lychrel numbers.
"""
import time
print("Problem 55")

start = time.time()

def isPalindrome(number):
    number = str(number)
    if number == number[::-1]:
        return(True)
    return(False)

def addReverse(n):
    return (n + int(str(n)[::-1]))

lychrelNumbers = 0
for n in range(10000):
    found = True
    for i in range(50):
        n = addReverse(n)
        if isPalindrome(n):
            found = False
            break
    if found:
        lychrelNumbers += 1

end = time.time()
print("There are", lychrelNumbers, "Lychrel Numbers below 10000")
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()

###############
# Problem 58  #
###############

"""
Starting with 1 and spiralling anticlockwise in the following way, a square spiral with side length 7 is formed.

37 36 35 34 33 32 31
38 17 16 15 14 13 30
39 18  5  4  3 12 29
40 19  6  1  2 11 28
41 20  7  8  9 10 27
42 21 22 23 24 25 26
43 44 45 46 47 48 49

It is interesting to note that the odd squares lie along the bottom right diagonal, but what is more interesting is that 8 out of the 13 numbers lying along both diagonals are prime; that is, a ratio of 8/13 ≈ 62%.

If one complete new layer is wrapped around the spiral above, a square spiral with side length 9 will be formed. If this process is continued, what is the side length of the square spiral for which the ratio of primes along both diagonals first falls below 10%?
"""
import time
from primes import isAPrimeNumber
print("Problem 58")

start = time.time()

def numberSpiral():
    n = loop = ratio = 1
    pN = 0
    while ratio > .1:
        for i in range(4):
            n += loop + 1
            if i != 3:
                if isAPrimeNumber(n):
                    pN += 1
        loop += 2
        ratio = pN / (loop * 2 - 1)
    return(loop)

print("Side length is ", numberSpiral())
end = time.time()
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()
##############
# Problem 59 #
##############

# XOR Decryption

"""
Each character on a computer is assigned a unique code and the preferred standard is ASCII (American Standard Code for Information Interchange). For example, uppercase A = 65, asterisk (*) = 42, and lowercase k = 107.

A modern encryption method is to take a text file, convert the bytes to ASCII, then XOR each byte with a given value, taken from a secret key. The advantage with the XOR function is that using the same encryption key on the cipher text, restores the plain text; for example, 65 XOR 42 = 107, then 107 XOR 42 = 65.

For unbreakable encryption, the key is the same length as the plain text message, and the key is made up of random bytes. The user would keep the encrypted message and the encryption key in different locations, and without both "halves", it is impossible to decrypt the message.

Unfortunately, this method is impractical for most users, so the modified method is to use a password as a key. If the password is shorter than the message, which is likely, the key is repeated cyclically throughout the message. The balance for this method is using a sufficiently long password key for security, but short enough to be memorable.

Your task has been made easy, as the encryption key consists of three lower case characters. Using cipher.txt (right click and 'Save Link/Target As...'), a file containing the encrypted ASCII codes, and the knowledge that the plain text must contain common English words, decrypt the message and find the sum of the ASCII values in the original text.
"""

import time
def loadWords():
    with open('words_alpha.txt') as File:
        words = set(File.read().split())
    return words

def loadCipherText():
    with open('p059_cipher.txt', 'r') as f:
        results = []
        for line in f:
            words = line.split(',')
            results.append(words)
    cipherString = ""
    for line in results:
        for a in line:
            cipherString += chr(int(a))
    return(cipherString) 

if __name__ == '__main__':
    print("Problem 59")
    start = time.time()
    englishWords = loadWords()
    cipherText = loadCipherText()
    #print("###################")
    #print("# Convert this... #")
    #print("###################")
    #for c in cipherText:
    #    if ord(c) < 32:
    #        print(".",end="")
    #    else:
    #        print(c,end="")
    #print()
    for first in range(97, 123):
        for second in range(97, 123):
            for third in range(97, 123):
                lengthMinus = len(cipherText) % 3
                string = cipherText
                for i in range(0,len(cipherText) - lengthMinus, 3):
                    threeChars = chr(ord(string[i]) ^ first) + chr(ord(string[i + 1]) ^ second) + chr(ord(string[i + 2]) ^ third)
                    string = string[:i] + threeChars + string[i + 3:]
                if lengthMinus == 1:
                    string = string[:-1] + chr(ord(string[-1]) ^ first)
                elif lengthMinus == 2:
                    string = string[:-2] + chr(ord(string[-2]) ^ first) + chr(ord(string[-1]) ^ second)
                spaces = []
                for i, c in enumerate(string):
                    if c == " ":
                        spaces.append(i)
                if len(spaces) > 50:
                    words = []
                    for i in range(1,len(spaces) - 2):
                        words.append(string[spaces[i]:spaces[i+1]].strip())
                    valid = 0
                    for word in words:
                        if word in englishWords:
                            valid += 1
                    if valid > 0.5 * len(spaces):
                        #print("##############")
                        #print("# To this... #")
                        #print("##############")        
                        #print(string + "\n")
                        finalSum = 0
                        for i in string:
                            finalSum += ord(i)
                        print("Sum of all ascii characters:", finalSum)
                        end = time.time()
                        print("Time Taken:", int((end - start) * 100) / 100, "Seconds")
                        # when run on own a quit() here speeds up things dramatically
print()

###############
# Problem 56  #
###############

"""
A googol (10100) is a massive number:
one followed by one-hundred zeros; 100100 is almost unimaginably large: one followed by two-hundred zeros. Despite their size, the sum of the digits in each number is only 1.

Considering natural numbers of the form, ab, where a, b < 100, what is the maximum digital sum?

"""
import time, math
print("Problem 56")

start = time.time()
largest = 0
for a in range(100):
    for b in range(100):
        total = 0
        digits = str(a ** b)
        for d in digits:
            total += int(d)
        if total > largest:
            largest = total

end = time.time()
print("The largest powerful digit sum is ",largest)
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()


###############
# Problem 63  #
###############

"""
The 5-digit number, 16807=75, is also a fifth power. Similarly, the 9-digit number, 134217728=89, is a ninth power.

How many n-digit positive integers exist which are also an nth power?
"""

# So the easy answer is the sum over i from 2 to 9 of (int)(i/log(i)) plus 1. The extra 1 is for 1^1 since log of 1 is zero we can't divide by zero.
# Obviously I didn't know that and brute force can't do it. 
import time, math
print("Problem 63")

start = time.time()

count = 0
for n in range(2, 9):
    count += int(n/math.log10(n))

end = time.time()
print("There are",count + 1,"powerful numnbers")
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()


##############
# Problem 67 #
##############
"""
By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.

3
7 4
2 4 6
8 5 9 3

That is, 3 + 7 + 4 + 9 = 23.

Find the maximum total from top to bottom in triangle.txt (right click and 'Save Link/Target As...'), a 15K text file containing a triangle with one-hundred rows.

NOTE: This is a much more difficult version of Problem 18. It is not possible to try every route to solve this problem, as there are 299 altogether! If you could check one trillion (1012) routes every second it would take over twenty billion years to check them all. There is an efficient algorithm to solve it. ;o)
"""


def maximumPathTwo():
  triangle = []
  # populate list
  with open("p067_triangle.txt", "r") as f:
    for lines in f:
      triangle.append(lines.rstrip('\n').split())
  f.close()
  # convert strings to ints
  for rows in range(len(triangle)):
    for cols in range(rows+1):
      triangle[rows][cols] = int(triangle[rows][cols])
  
  # From here is identical to problem 18
  
  # Iterate over triangle from bottom up
  for rows in reversed(range(0, len(triangle))):
    for cols in range(rows):
      a = triangle[rows][cols] + triangle[rows - 1][cols]
      b = triangle[rows][cols + 1] + triangle[rows - 1][cols]
      if a > b:
        triangle[rows - 1][cols] = a
      else: 
        triangle[rows - 1][cols] = b
  return(triangle[0][0])

print("Problem 67")
start = time.time()
print("Maximum Path Sum II Total: ", maximumPathTwo())
end = time.time()
print("Time taken: " + str(int( ((end - start)*1000)     *100)/100) + " milli seconds")
print()

###############
# Problem 74  #
###############

"""
The number 145 is well known for the property that the sum of the factorial of its digits is equal to 145:

1! + 4! + 5! = 1 + 24 + 120 = 145

Perhaps less well known is 169, in that it produces the longest chain of numbers that link back to 169; it turns out that there are only three such loops that exist:

169 → 363601 → 1454 → 169
871 → 45361 → 871
872 → 45362 → 872

It is not difficult to prove that EVERY starting number will eventually get stuck in a loop. For example,

69 → 363600 → 1454 → 169 → 363601 (→ 1454)
78 → 45360 → 871 → 45361 (→ 871)
540 → 145 (→ 145)

Starting with 69 produces a chain of five non-repeating terms, but the longest non-repeating chain with a starting number below one million is sixty terms.

How many chains, with a starting number below one million, contain exactly sixty non-repeating terms?
"""
import time
print("Problem 74")

start = time.time()
factors = {'0':1, '1':1, '2':2, '3':6, '4':24, '5':120, '6':720, '7':5040, '8':40320,'9':362880}
count = 0
for n in range(1000000):
    number = str(n)
    chain = set()
    chain.add(number)
    while True:
        total = 0
        for digit in number:
            total += factors[digit]
        number = str(total)
        if not number in chain:
            chain.add(number)
        else:
            break
    if len(chain) == 60 and int(number) != n:
        count += 1
        
end = time.time()
print("There are ",count, "chains of 60")
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()

##############
# Problem 79 #
##############
"""
A common security method used for online banking is to ask the user for three random characters from a passcode. For example, if the passcode was 531278, they may ask for the 2nd, 3rd, and 5th characters; the expected reply would be: 317.

The text file, keylog.txt, contains fifty successful login attempts.

Given that the three characters are always asked for in order, analyse the file so as to determine the shortest possible secret passcode of unknown length.
"""

# 7 3 1 6 2 8 9 0

def shouldWeSwap(numbers, i, j):
  if i == j:
    return(False)
  if str(i) in numbers[j]:
    return(True)
  if len(numbers[j]) == 0:
    return(False)
  return(False)

def passcodeDerivation():
  numbers=[]
  for i in range(10):
    numbers.append(set())
  # read in all numbers and work out which number follows other numbers
  with open("p079_keylog.txt", "r") as f:
    for lines in f:
      a = int(lines[0])
      b = int(lines[1])
      c = int(lines[2])
      numbers[a].add(str(b))
      numbers[b].add(str(c))
  f.close()
  l = set()
  for rows in numbers:
    for i in range(10):
      if str(i) in rows:
        l.add(i)
      if len(numbers[i]) > 0:
        l.add(i)
  l = list(l)
  changed = True
  # move along list repeatedly until no change
  while changed:
    changed = False
    for i in range(len(l) - 1):
      for j in range(i + 1 ,len(l)):
        swap = False
        if j > i:
          swap = shouldWeSwap(numbers, l[i], l[j])
        if swap:
          old = l[i]
          l[i] = l[j]
          l[j] = old
          changed = True
  # Put into string
  s = ""
  for n in l:
    s += str(n)
  return(s)

print("Problem 79")
start = time.time()
print("Passcode Derivation : ", passcodeDerivation())
end = time.time()
print("Time taken: " + str(int( ((end - start)*1000)     *100)/100) + " milli seconds")
print()

###############
# Problem 80  #
###############

"""
It is well known that if the square root of a natural number is not an integer, then it is irrational. The decimal expansion of such square roots is infinite without any repeating pattern at all.

The square root of two is 1.41421356237309504880..., and the digital sum of the first one hundred decimal digits is 475.

For the first one hundred natural numbers, find the total of the digital sums of the first one hundred decimal digits for all the irrational square roots.
"""
import time, math
from decimal import *
getcontext().prec = 110
print("Problem 80")

start = time.time()
total = 0
for n in range(1,101):
    nStr = str(Decimal(n).sqrt())[0:101]
    if len(nStr) > 2:
        for digit in nStr:
            if digit != ".":
                total += int(digit)

end = time.time()
print("Square root digital exspansion",total)
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()


##############
# Problem 81 #
##############
"""
In the 5 by 5 matrix below, the minimal path sum from the top left to the bottom right, by only moving to the right and down, is indicated in bold red and is equal to 2427.


Find the minimal path sum, in matrix.txt (right click and "Save Link/Target As..."), a 31K text file containing a 80 by 80 matrix, from the top left to the bottom right by only moving right and down.
"""
# 427337

def pathSumTwoWays():
  grid = []
  # populate grid
  with open("p081_matrix.txt", "r") as f:
    for lines in f:
      grid.append(lines.rstrip('\n').split(','))
  f.close()
  
  # Init weighting grid
  weights = [[0 for i in range(len(grid))] for j in range(len(grid[0]))]

  MAXIMUM = 99999999999
  Y = len(grid)
  # Make weights by climbing grid bottom up (reversed path)
  for row in reversed(range(Y)):
    X = len(grid[row])
    for col in reversed(range(X)):
      current = int(grid[row][col])
      # no right or down for corner
      if row == Y - 1 and col == X - 1:
        weights[row][col] = current
        continue
      if (row + 1) < Y:
        down = weights[row + 1][col]
      else: 
        down = MAXIMUM
      if (col + 1) < X:
        right = weights[row][col + 1]
      else:
        right = MAXIMUM
      if down < right:
        weights[row][col] = current + down
      else:
        weights[row][col] = current + right
      
  # find minimal path (top down)
  startY = startX = 0
  endY = len(grid) -1
  endX = len(grid[endY]) - 1
  # Add starting value
  sumOfMin = int(grid[startY][startX])
  while startY < endY and startX < endX:
    if startX < endX:
      right = weights[startY][startX + 1]
    else:
      right = MAXIMUM
    if startY < endY:
      down = weights[startY + 1][startX]
    else:
      down = MAXIMUM
    if right < down:
      startX += 1
    else:
      startY += 1
    sumOfMin += int(grid[startY][startX])
  # Add destination value    
  sumOfMin += int(grid[endY][endX])
  return(sumOfMin)

print("Problem 81")
start = time.time()
print("Path sum two way: ", pathSumTwoWays())
end = time.time()
print("Time taken: " + str(int( ((end - start)*1000)     *100)/100) + " milli seconds")
print()
"""
##############
# Problem 82 #
##############

# Standard imports
import math

# Global variables
INFINITY = math.inf

# Node structure
class ASTARNode():
  localGoal = math.inf
  globalGoal = math.inf
  parent = (-1, -1)
  visited = False
  neighbours = []
  cost = 0

#################################
# Functions specific to problem #
#################################

def heuristic(grid, start, end):
  # Euclidean Distance
  y = abs(end[0] - start[0])
  x = abs(end[1] - start[1])
  return(math.sqrt(y * y + x * x))

def getNeighbours(grid, row, col):
  neighbours = []
  if row > 0:
    neighbours.append((row - 1, col)) # up
  if row < len(grid) - 1:
    neighbours.append((row + 1, col)) # down
  if col < len(grid[row]) - 1:
    neighbours.append((row, col + 1)) # right

  return(neighbours)
    
def foundRoute(grid, start, end):
  pathSum = grid[end[0]][end[1]].cost
  t = []
  (y, x) = end
  while grid[y][x].parent != (-1, -1):
    t.append((y, x))
    (y, x) = grid[y][x].parent
    pathSum += grid[y][x].cost
  t.append(start)
  return(t, pathSum)
 
lowest = INFINITY
gridF = []
global grid
grid = []
# populate grid with ints from string file
with open("p082_matrix.txt", "r") as f:
  for lines in f:
    gridF.append([int(i) for i in lines.split(',')])
f.close()

    
#############################################
# Two test grids - uncomment either and run #
# to test. Uncomment both to work on file   #
#############################################

# Shortest path cost here is 994
# path = (1, 0), (1, 1), (1, 2), (0, 2), (0, 3), (0, 4)
#
#gridF = []
#gridF.append([131,673,234,103,18])
#gridF.append([201,96,342,965,150])
#gridF.append([630,803,746,422,111])
#gridF.append([537,699,497,121,956])
#gridF.append([805,732,524,37,331])

# Shortest path cost here is 95
# (0, 0), (0, 1), (1, 1), (2, 1), (3, 1), (3, 2), (3, 3), (2, 3), (1, 3), (0, 3), (0, 4)
#gridF = []
#gridF.append([21,10,61,2,10])
#gridF.append([42, 8,51,7,35])
#gridF.append([63,11,45,9,38])
#gridF.append([81, 5,11,1,22])
#gridF.append([99,10,2,10,90])
routes = []
lowestRoute = math.inf
# Initialise our working grid
for st in range(len(gridF)):
  for e in range(len(gridF)):
    grid = [[0 for i in range(len(gridF))] for j in range(len(gridF[0]))]
    for row in range(len(gridF)):
      for col in range(len(gridF[0])):
        node = ASTARNode()
        grid[row][col] = node
        grid[row][col].cost = gridF[row][col]

    start = (st,0)
    end = (e , len(gridF[0]) - 1)
    print(start, end)
    # Start point
    (y, x) = start
    # Update the starting node's localGoal and set to zero
    grid[y][x].localGoal = 0
    #grid[end[0]][end[1]].globalGoal = 0
    nodes = []
    nodes.append(start)
    while True:
      # Loop thru neighbours
      for neighbour in getNeighbours(grid, y, x): 
        # Test each neighbour
        (Y, X) = neighbour
        localCost = grid[y][x].localGoal + grid[y][x].cost
        # Update if lower cost
        if localCost < grid[Y][X].localGoal:
          grid[Y][X].localGoal = localCost
          grid[Y][X].parent = (y, x)
          # Calculate heuristic 
          grid[Y][X].globalGoal = heuristic(grid, (Y, X), end) + localCost
        if not grid[neighbour[0]][neighbour[1]].visited:   
          nodes.append(neighbour)
          
      grid[y][x].visited = True
      
      # Priority Queue
      nodes.sort(key=lambda c: grid[c[0]][c[1]].globalGoal)
      
      # Clean the queue
      nodes = [node for node in nodes if not grid[node[0]][node[1]].visited]
          
      if len(nodes) == 0:
        # Found shortest
        break
      (y, x) = nodes[0]
      
    # Track back path to find route and cost
    temp, pathSum = foundRoute(grid, start, end)
    # Do we have a lower cost route? 
    if pathSum < lowestRoute:
      lowestRoute = pathSum
      routes = temp
      print("------------------>>>>>PathSUM",pathSum,)
print(lowestRoute, list(reversed(routes)))

"""
##############
# Problem 83 #
##############

# Standard imports
import math

# Node structure
class ASTARNode():
  localGoal = math.inf
  globalGoal = math.inf
  parent = (-1, -1)
  visited = False
  neighbours = []
  cost = 0

#################################
# Functions specific to problem #
#################################
def heuristic(grid, start, end):
  # Euclidean Distance
  y = abs(end[0] - start[0])
  x = abs(end[1] - start[1])
  return(math.sqrt(y * y + x * x))

def getNeighbours(grid, row, col):
  neighbours = []
  if row > 0:
    neighbours.append((row - 1, col)) # up
  if row < len(grid) - 1:
    neighbours.append((row + 1, col)) # down
  if col < len(grid[row]) - 1:
    neighbours.append((row, col + 1)) # right
  if col > 0:
    neighbours.append((row, col - 1)) # left
  return(neighbours)

def foundRoute(grid, start, end):
  pathSum = grid[end[0]][end[1]].cost
  t = []
  (y, x) = end
  while grid[y][x].parent != (-1, -1):
    t.append((y, x))
    (y, x) = grid[y][x].parent
    pathSum += grid[y][x].cost
  t.append(start)
  return(t, pathSum)
 
gridF = []
grid = []
# populate grid with ints from string file
with open("p082_matrix.txt", "r") as f:
  for lines in f:
    gridF.append([int(i) for i in lines.split(',')])
f.close()

# Shortest path cost here is 2297
# (0, 0), (1, 0), (1, 1), (1, 2), (0, 2), (0, 3), (0, 4), (1, 4), (2, 4), (2, 3), (3, 3), (4, 3), (4, 4)

#gridF = []
#gridF.append([131,673,234,103,18])
#gridF.append([201,96,342,965,150])
#gridF.append([630,803,746,422,111])
#gridF.append([537,699,497,121,956])
#gridF.append([805,732,524,37,331])

# Initialise our working grid
grid = [[0 for i in range(len(gridF))] for j in range(len(gridF[0]))]
for row in range(len(gridF)):
  for col in range(len(gridF[0])):
    node = ASTARNode()
    grid[row][col] = node
    grid[row][col].cost = gridF[row][col]

start = (0,0)
end = (len(grid) - 1 , len(grid[0]) - 1)
(y, x) = start
# Set starting localGoal and set to zero
grid[y][x].localGoal = 0
nodes = []
nodes.append(start)
while len(nodes) != 0:
  # Loop thru neighbours
  for neighbour in getNeighbours(grid, y, x): 
    # Test each neighbour
    (Y, X) = neighbour
    localCost = grid[y][x].localGoal + grid[Y][X].cost
    # Update if lower cost
    if localCost < grid[Y][X].localGoal:
      grid[Y][X].localGoal = localCost
      grid[Y][X].parent = (y, x)
      # Calculate heuristic 
      grid[Y][X].globalGoal = heuristic(grid, (Y, X), end) + localCost
    if not grid[neighbour[0]][neighbour[1]].visited:   
      nodes.append(neighbour)
  grid[y][x].visited = True
  # Priority Queue
  nodes.sort(key=lambda c: grid[c[0]][c[1]].globalGoal)
  # Clean the queue of visited nodes
  nodes = [node for node in nodes if not grid[node[0]][node[1]].visited]
  # exit?
  if len(nodes) == 0:
    # Found shortest
    break
  (y, x) = nodes[0]
# Track back path to find route and cost
print("Problem 83")
route, pathSum = foundRoute(grid, start, end)
print("PathSUM",pathSum,)
#print(list(reversed(route)))
print()


##############
# Problem 92 #
##############

"""
A number chain is created by continuously adding the square of the digits in a number to form a new number until it has been seen before.

For example,

44 → 32 → 13 → 10 → 1 → 1
85 → 89 → 145 → 42 → 20 → 4 → 16 → 37 → 58 → 89

Therefore any chain that arrives at 1 or 89 will become stuck in an endless loop. What is most amazing is that EVERY starting number will eventually arrive at 1 or 89.

How many starting numbers below ten million will arrive at 89?
"""
import time

start = time.time()
print("Problem 92")
count = 0
squares = {"0": 0, "1":1, "2":4, "3":9, "4":16, "5":25, "6":36, "7":49, "8":64, "9":81}
cache89 = {'18', '462', '300', '461', '20', '450', '317', '84', '369', '499', '516', '213', '298', '308', '360', '53', '503', '83', '314', '116', '123', '567', '425', '327', '281', '21', '77', '278', '321', '195', '174', '135', '494', '434', '98', '238', '267', '357', '85', '8', '122', '348', '266', '436', '153', '396', '470', '399', '180', '80', '488', '197', '101', '290', '401', '346', '306', '3', '62', '288', '61', '467', '185', '107', '58', '64', '137', '374', '177', '163', '339', '398', '333', '471', '414', '108', '95', '248', '441', '405', '354', '261', '353', '294', '56', '453', '148', '344', '124', '233', '164', '323', '484', '284', '59', '377', '375', '518', '224', '4', '128', '12', '161', '147', '418', '350', '55', '247', '184', '11', '254', '330', '105', '245', '427', '182', '255', '335', '468', '342', '381', '466', '452', '324', '259', '2', '69', '332', '76', '215', '463', '432', '454', '162', '550', '146', '45', '303', '269', '533', '46', '270', '246', '223', '479', '275', '113', '66', '145', '380', '482', '448', '227', '235', '34', '433', '340', '96', '311', '209', '183', '438', '442', '412', '244', '22', '241', '60', '449', '25', '495', '206', '178', '439', '186', '285', '260', '204', '131', '460', '252', '393', '52', '347', '87', '373', '202', '370', '138', '358', '33', '423', '457', '73', '371', '309', '170', '228', '201', '501', '78', '89', '65', '104', '272', '196', '336', '250', '121', '232', '39', '117', '172', '389', '328', '72', '150', '29', '155', '40', '502', '171', '349', '111', '168', '473', '140', '158', '141', '296', '126', '207', '286', '175', '221', '191', '287', '416', '274', '156', '355', '297', '279', '234', '511', '166', '160', '276', '27', '417', '443', '102', '299', '257', '359', '421', '48', '341', '231', '289', '159', '30', '225', '210', '63', '211', '535', '6', '334', '41', '165', '465', '295', '136', '431', '428', '67', '351', '387', '451', '50', '216', '125', '112', '456', '9', '415', '265', '17', '16', '37', '273', '181', '485', '444', '144', '307', '42', '151', '71', '258', '14', '422', '199', '15', '242', '134', '114', '420', '385', '455', '54', '419', '394', '315', '372', '407', '119', '505', '384', '81', '217', '214', '435', '200', '378', '118', '445', '115', '243', '249', '240', '75', '477', '106', '413', '253', '406', '400', '337', '304', '143', '88', '51', '99', '251', '189', '312', '90', '382', '292', '24', '352', '430', '282', '173', '424', '149', '402', '237', '447', '426', '411', '26', '318', '198', '429', '283', '218', '388', '229', '194', '142', '363', '47', '36', '222', '220', '92', '395', '325', '132', '57', '403', '5', '264', '410', '43', '179', '120', '74', '271', '187', '212', '458', '316', '522', '277', '305', '256', '157', '361', '390', '38', '322', '437', '366', '93', '205', '127', '154', '364', '486', '152', '343', '268', '169', '408', '35', '345', '110'}
for n in range(1, 10000000):
    s = str(n)
    while s != "1" and s != "89":
        digitSquareSum = 0
        for i in range(len(s)):
            digitSquareSum += squares[s[i]]
        s = str(digitSquareSum)
        if s in cache89:
            s = "89"
            break
    if s == "89":
        count += 1
print("Total numbers ending with 89 under 10,000,000:", count)
end = time.time()
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()

###############
# Problem 99  #
###############

"""
Comparing two numbers written in index form like 211 and 37 is not difficult, as any calculator would confirm that 211 = 2048 < 37 = 2187.

However, confirming that 632382518061 > 519432525806 would be much more difficult, as both numbers contain over three million digits.

Using base_exp.txt (right click and 'Save Link/Target As...'), a 22K text file containing one thousand lines with a base/exponent pair on each line, determine which line number has the greatest numerical value.

NOTE: The first two lines in the file represent the numbers in the example given above.
"""
import time, math
print("Problem 99")

start = time.time()
largest = l = lN = 0
with open('p099_base_exp.txt') as fp:
    for line in fp:
        l += 1
        base, exp = line.split(',')
        base = math.log(int(base))
        number = base * int(exp)
        if number > largest:
            largest = number
            lN = l

print("The largest line is", lN)
end = time.time()
print("Time taken:", int((end - start)*1000) / 1000, "Seconds")
print()

################
# Problem 104  #
################

"""
The Fibonacci sequence is defined by the recurrence relation:

Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
It turns out that F541, which contains 113 digits, is the first Fibonacci number for which the last nine digits are 1-9 pandigital (contain all the digits 1 to 9, but not necessarily in order). And F2749, which contains 575 digits, is the first Fibonacci number for which the first nine digits are 1-9 pandigital.

Given that Fk is the first Fibonacci number for which the first nine digits AND the last nine digits are 1-9 pandigital, find k.

"""
import time
print("Problem 104")
start = time.time()
# This is about 2.5hrs long - but it works!!!
# K = 329468
# Time taken: 8999.23 Seconds
def fib():
    n1, n2, s = 1, 1, 3
    compare = ['1','2','3','4','5','6','7','8','9']
    while True:
        n = n1 + n2
        if sorted(str(n)[-9:]) == compare:
            if sorted(str(n)[:9]) == compare:
                return(s)
        s += 1
        n1, n2 = n2, n

print("K =", fib())
end = time.time()
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()


###############
# Problem 112 #
###############

"""
Working from left-to-right if no digit is exceeded by the digit to its left it is called an increasing number; for example, 134468.

Similarly if no digit is exceeded by the digit to its right it is called a decreasing number; for example, 66420.

We shall call a positive integer that is neither increasing nor decreasing a "bouncy" number; for example, 155349.

Clearly there cannot be any bouncy numbers below one-hundred, but just over half of the numbers below one-thousand (525) are bouncy. In fact, the least number for which the proportion of bouncy numbers first reaches 50% is 538.

Surprisingly, bouncy numbers become more and more common and by the time we reach 21780 the proportion of bouncy numbers is equal to 90%.

Find the least number for which the proportion of bouncy numbers is exactly 99%.


"""
import time

def isBouncy(number):
    n = str(number)
    increasing = True
    for i in range(len(n) - 1):
        if int(n[i]) > int(n[i + 1]):
            increasing = False
    if increasing:
        return("increasing")
    decreasing = True
    for i in range(len(n) - 1):
        if int(n[i]) < int(n[i + 1]):
            decreasing = False
    if decreasing:
        return("decreasing")
    return("bouncy")

start = time.time()
print("Problem 112")
target = 99
percentage = 0
number = 0
bouncyCount = 0
while percentage != target:
    if isBouncy(number) == "bouncy":
        bouncyCount += 1
        percentage = (bouncyCount / number) * 100
    number += 1
end = time.time()
print("Bouncy number at "+ str(target) + "% is " + str(number - 1))
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()

###############
# Problem 145 #
###############

"""
Some positive integers n have the property that the sum [ n + reverse(n) ] consists entirely of odd (decimal) digits. For instance, 36 + 63 = 99 and 409 + 904 = 1313. We will call such numbers reversible; so 36, 63, 409, and 904 are reversible. Leading zeroes are not allowed in either n or reverse(n).

There are 120 reversible numbers below one-thousand.

How many reversible numbers are there below one-billion (109)?

"""
import time

def isReversible(number):
    N = str(number)
    # Reverse
    rN = N[::-1]
    
    # must be odd and even starts - optimised
    if not (int(N[0]) % 2 == 0 and int(rN[0]) % 2 != 0):
        if not (int(rN[0]) % 2 == 0 and int(N[0]) % 2 != 0):
            return(False)
    
    # Each digit must be odd
    for digit in str(number + int(rN)):
        if not int(digit) % 2:
            return(False)
    return(True)
    

start = time.time()
print("Problem 145")

reversible = 120
for n in range(999,100000000,2):
    # Optimise by removing zeros in reversed number
    if n % 10 == 0:
        continue
    if isReversible(n):
        reversible += 2
        
end = time.time()
print("There are", reversible, "numbers ")
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()

################
# Problem 146  #
################

"""
The smallest positive integer n for which the numbers n2+1, n2+3, n2+7, n2+9, n2+13, and n2+27 are consecutive primes is 10. The sum of all such integers n below one-million is 1242490.

What is the sum of all such integers n below 150 million?
#676333270
"""
import time
# My own module - runs pypy3 in 6131.67 Seconds
from primes import isAPrimeNumber
# Not my module isPrime - runs pypy3 in 5.5 seconds
from rabinmiller import *
print("Problem 146")

start = time.time()
check = [1,3,7,9,13,27]
# Depending on the isPrime checking function this group may be expanded to primes upto 4000. Some primes
# are purposely missed out because they would match n * n + c
quickTest = [17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,131,137,139,149,151,157,163,167,173,179,181, 191,193,197,199,211,223,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,541,547,557,563,569,571,577,587,593,599,631,641,643,647,653,659,661,673,677,683,691,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1129,1151,1153,1163,1171,1181,1187,1193,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1361,1367,1373,1381,1399,1409,1423,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1637,1657,1663,1667,1669,1693,1697,1699,1733,1741,1747,1753,1759,1777,1783,1787,1789,1831,1847,1861,1867,1871,1873,1877,1879,1889,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2129,2131,2137,2141,2143,2153,2161,2179,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2437,2441,2447,2459,2467,2473,2477,2531,2539,2543,2549,2551,2557,2579,2591,2593,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2833,2837,2843,2851,2857,2861,2879,2887,2897,2927,2939,2953,2957,2963,2969,2971,2999,3037,3041,3049,3061,3067,3079,3083,3089,3137,3163,3167,3169,3181,3187,3191,3221,3229,3251,3253,3257,3259,3271,3299,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3433,3449,3457,3461,3463,3467,3469,3491,3499,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3631,3637,3643,3659,3671,3673,3677,3691,3697,3733,3739,3761,3767,3769,3779,3793,3797,3833,3847,3851,3853,3863,3877,3881,3889,3929,3931,3943,3947,3967,3989]
total = 0
# Optimisations:
# start at 10 and increment by 10 because n * n must be even and mod 2 , 5 & 10 (my own work)
# n * n must be mod 3 == 1, mod 7 == 2 or 3 (my own work)
# n * n mod 9, 13 & 27 must not be 0 (not mine)
# quick check n * n + {1,3,7,9,13,27} against small group of primes. Speeds up massively (my own work)
# Finally a deterministic Rabin-Miller test is used for Primality test but before that a test
# is done to see if the number is not prime (rules out 1/3 of non primes)
for n in range(10,150000000, 10): # step 10 saves 41.5 seconds
  nn = n * n
  # These were determined by analysing the results of upto 10,000,000
  if nn % 3 != 1: continue # saves very little 0.1 seconds
  if nn % 7 != 2 and nn % 7 != 3: continue # saves 13 seconds
  if nn % 9 == 0 or nn % 13 == 0 or nn % 27 == 0: continue # saves 0.5 seconds
  # Do quick check - saves about 38 seconds
  failed = False
  for p in quickTest:
    for c in check:
      if (nn + c) % p == 0:
        failed = True
        break
    if failed: break
  if failed: continue
  # The actual F(n) tests
  if isPrime(nn + 1):
    if isPrime(nn + 3):
      if isPrime(nn + 7):
        if isPrime(nn + 9):
          if isPrime(nn + 13):
            if isPrime(nn + 27): # This line and ...
              if not isPrime(nn + 19) and not isPrime(nn + 21): # this line saves about 0.1s in this order
                total += n

print("The sum of all integers below 150,000,000 is", total)
end = time.time()
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()


###############
# Problem 205 #
###############

"""
Peter has nine four-sided (pyramidal) dice, each with faces numbered 1, 2, 3, 4.
Colin has six six-sided (cubic) dice, each with faces numbered 1, 2, 3, 4, 5, 6.

Peter and Colin roll their dice and compare totals: the highest total wins. The result is a draw if the totals are equal.

What is the probability that Pyramidal Pete beats Cubic Colin? Give your answer rounded to seven decimal places in the form 0.abcdefg

"""
import time
import random

def peterRolls():
    total = 0
    for n in range(9):
        total += random.randint(1,4)
    return(total)
    
def colinRolls():
    total = 0
    for n in range(6):
        total += random.randint(1,6)
    return(total)

start = time.time()
print("Problem 205")
random.seed(1)
probability = 0
peterWins = 0
colinWins = 0
draws = 0
smallestDiff = 1
# range(1,12230590465)
for n in range(1,908926):
    p = peterRolls()
    c = colinRolls()
    if p > c :
        peterWins += 1
    elif p < c:
        colinWins += 1
    else:
        draws += 1
    probability = peterWins / (peterWins + colinWins + draws)


end = time.time()
print("Peter beats Colin ", round(probability, 7), "("+str(probability)+")" , "Ratio. After", n, "Sets of throws")
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()


###############
# Problem 206 #
###############

"""
Find the unique positive integer whose square has the form 1_2_3_4_5_6_7_8_9_0,
where each “_” is a single digit.
"""
# take sqrt of 1929394959697989990 - 1389026623
# but we can remove the last 2 digits and multiple by 10
# ignore even numbers
print("Problem 206")

import time
start = time.time()
for n in range(138902669,0, -2):
    s = n * n
    s = str(s)
    if len(s) == 17:
        if s[0] == '1' and s[2] == '2' and s[4] == '3' and s[6] == '4' and s[8] == '5' and s[10] == '6' and s[12] == '7' and s[14] == '8' and s[16] == '9':# and s[18] == '0':
            print("Concealed Square",n * 10)
            break

end = time.time()
print("Time taken: ", int((end - start) * 1000) / 1000, "Seconds")
print()

################
# Problem 493  #
################

"""
70 colored balls are placed in an urn, 10 for each of the seven rainbow colors.

What is the expected number of distinct colors in 20 randomly picked balls?

Give your answer with nine digits after the decimal point (a.bcdefghij).
"""
import time, math
print("Problem 493")

start = time.time()

# 7(1 - (60 choose 20)/(70 choose 20))

def choose(fromTotal, chooseNumber):
  # 40! / 20! * (40 - 20)!
  result = math.factorial(fromTotal) / (math.factorial(chooseNumber) * (math.factorial(fromTotal - chooseNumber)))
  return(result)



print("Expected number of distinct colors in 20 randomly picked balls:",str(7 * (1 - choose(60, 20) / choose(70 ,20)))[:11])
end = time.time()
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()

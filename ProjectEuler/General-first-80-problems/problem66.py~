###############
# Problem 66  #
###############

"""

Consider quadratic Diophantine equations of the form:

x2 – Dy2 = 1

For example, when D=13, the minimal solution in x is 6492 – 13×1802 = 1.

It can be assumed that there are no solutions in positive integers when D is square.

By finding minimal solutions in x for D = {2, 3, 5, 6, 7}, we obtain the following:

32 – 2×22 = 1
22 – 3×12 = 1
92 – 5×42 = 1
52 – 6×22 = 1
82 – 7×32 = 1

Hence, by considering minimal solutions in x for D ≤ 7, the largest x is obtained when D=5.

Find the value of D ≤ 1000 in minimal solutions of x for which the largest value of x is obtained.
"""
import time, math
print("Problem 66")

start = time.time()

def gcd(x, y):
  while y:
    x, y = y, x % y
  return x

def checkPell(x, y, d):
  if (x * x) - d * (y * y) == 1:
    return(True)
  return(False)

for d in range(1, 11):
  x = y = 1
  while not checkPell(x ,y, d):
    






end = time.time()
print("Time taken:", int((end - start)*100) / 100, "Seconds")
print()
